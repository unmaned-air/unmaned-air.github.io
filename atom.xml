<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://unmaned-air.github.io</id>
    <title>沉舟侧畔</title>
    <updated>2022-06-24T10:00:56.096Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://unmaned-air.github.io"/>
    <link rel="self" href="https://unmaned-air.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://unmaned-air.github.io/images/avatar.png</logo>
    <icon>https://unmaned-air.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 沉舟侧畔</rights>
    <entry>
        <title type="html"><![CDATA[数字逻辑复习篇]]></title>
        <id>https://unmaned-air.github.io/post/shu-zi-luo-ji-fu-xi-pian/</id>
        <link href="https://unmaned-air.github.io/post/shu-zi-luo-ji-fu-xi-pian/">
        </link>
        <updated>2022-05-28T18:37:41.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>从算术运算电路开始进行复习</p>
</blockquote>
<h2 id="算术运算电路"><strong>算术运算电路</strong></h2>
<p><em>主要讲了各种加法器，利用加法器构建减法器、乘法器等等。</em></p>
<h3 id="无符号数的加法运算"><strong>无符号数的加法运算</strong></h3>
<p>要完成加法，需要一位进位C<sub>i+1</sub> ，一位本位S<sub>i</sub> ，才能完成加法运算。<br>
用Verilog代码描述时，可以直接使用‘+’，也可以按照电路相加。</p>
<h4 id="半加器与全加器"><strong>半加器与全加器</strong></h4>
<ul>
<li>半加器<br>
可以理解为是1位数相加，不考虑低位进位。<br>
逻辑表达式：s=a^b<br>
c=a&amp;b</li>
<li><a id="add">全加器</a><br>
需要考虑低位的进位（不再是单纯的c，而是ci）。<br>
<em>S<sub>i+1</sub>=a<sub>i+1</sub> ^ b<sub>i+1</sub> ^ C<sub>i</sub></em><br>
<em>C<sub>i+1</sub>=a<sub>i</sub>&amp;b<sub>i</sub>+a<sub>i</sub>&amp;C<sub>i</sub>+b<sub>i</sub>&amp;C<sub>i</sub></em><br>
<strong>Verilog代码演示</strong> ：</li>
</ul>
<pre><code class="language-C++">    module fulladd(Cin,x,y,s,Cout);
    input Cin,x,y;
    output s,Cout;
    xor(s,x,y,Cin);
    and(z1,x,y),
          (z2,x,Cin),
          (z3,y,Cin);//Verilog可以通过换行达到代码的简介，用逗号隔开各个接口块
                         //原来也可以不用声明网络wire型变量，因为Verilog默认所有的
                         //信号为网络数据
    or(Cout,z1,z2,z3);
    endmodule
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://unmaned-air.github.io/post-images/1654429625114.png" alt="" loading="lazy"></figure>
<h4 id="行波进位加法器"><strong>行波进位加法器</strong></h4>
<p>第i位产生的进位加入到第i+1的运算中，对于每一位，我们可以使用一个全加器。这样会使得最后一位结果必须将前面所有位都算出之后才能得到，延时很高。<br>
<img src="https://unmaned-air.github.io/post-images/1654430583000.png" alt="" loading="lazy"><br>
<strong>Verilog代码演示</strong> ：</p>
<pre><code class="language-C++">    module addern(carrin,X,Y,S,carryout);
    parameter n=32;
    input carryin;
    input[n-1:0]X,Y;
    output reg [n-1:0]S;
    output reg carryout;
    reg [n:0] C;
    integer k;
    always @(X,Y,carryin)
    begin
    	C[0]=carryin;
    	for(k=0;k&lt;n;k=k+1)
    	begin
    		S[k]=X[k]^Y[k]^C[k];
    		C[k+1]=(X[k]&amp;Y[k])|(X[k]&amp;C[k])|(Y[k]&amp;C[k]);//直观的最小项之和表达式
    	end
    	carryout=C[n];
    end
    endmodule
</code></pre>
<h4 id="快速加法器超前先行进位加法器">快速加法器（<em>超前（先行）进位加法器</em>）</h4>
<p><em>由行波进位加法器加法器可发现，最主要的延时由进位c<sub>i</sub>产生，快速加法器相较于行波进位加法器主要是对c<sub>i</sub>位进行操作。于是将逻辑式复合化简得出快速加法器的原理式，缺点是当运算加数位数较多时，电路会有些复杂。</em><br>
第i级的进位函数可以表示为:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mi>Y</mi><mi>i</mi></msub><mo>+</mo><msub><mi>X</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>+</mo><msub><mi>Y</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_{i+1}=X_i Y_i+X_i C_i+Y_i C_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>提取公因子并用字母代换得到：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>g</mi><mi>i</mi></msub><mo>+</mo><msub><mi>p</mi><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_{i+1} = g_i +p_i c_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">g_i=x_i y_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i=x_i +y_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>第i级将进位信号 c_i 传播到下一级，因此称p_i 为传播函数。<br>
将i-1项进位无限展开，可以得到：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>g</mi><mi>i</mi></msub><mo>+</mo><msub><mi>p</mi><mi>i</mi></msub><msub><mi>g</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>+</mo><msub><mi>p</mi><mi>i</mi></msub><msub><mi>p</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>1</mn></msub><msub><mi>g</mi><mn>0</mn></msub><mo>+</mo><msub><mi>p</mi><mi>i</mi></msub><msub><mi>p</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>p</mi><mn>1</mn></msub><msub><mi>p</mi><mn>0</mn></msub><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">c_{i+1}=g_i+p_i g_{i-1}+··· ···+p_i p_{i-1}···p_2 p_1 g_0+p_i p_{i-1}···p_1 p_0 c_0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord">+</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6527810000000001em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><img src="https://unmaned-air.github.io/post-images/1654436688310.png" alt="" loading="lazy"><br>
<em>可以看见如图，超前进位加法器需要前面每一位g<sub>i</sub>、p<sub>i</sub>的结果输入到c位中，可以加快速度，但会使得线网的复杂度大大升高。</em></p>
<h4 id="比较器">比较器</h4>
<ul>
<li><a id="compare">利用全加器实现的比较器</a>（<a href="#add">全加器模块见上方</a>）</li>
</ul>
<pre><code class="language-C++">  module comparator(X,Y,V,N,Z)
      parameter n=32;
      input [n-1:0] X,Y;
      output reg V,N,Z;
      reg [n-1:0] S;
      reg [n:0] C:
      integer k;
      always@(X,Y)
      begin
          C[0]=1'b1;
          for(k=0;k&lt;n;k=k+1)
          begin
              S[k]=X[k]^~Y[k]^C[k];
              C[k+1]=(X[k]&amp;~Y[k])|(X[k]&amp;C[k])|(~Y[k]&amp;C[k]);//这两行注意理解，通过真值表可以写出表达式
          end
          V=C[n]^C[n-1];
          N=S[n-1];
          Z=!S;
      end
  endmodule;
</code></pre>
<ul>
<li>通用Verilog代码</li>
</ul>
<h2 id="组合电路模块"><strong>组合电路模块</strong></h2>
<pre><code>这一章主要学了一些在电路中常出现使用的模块
</code></pre>
<h3 id="多路选择器">多路选择器</h3>
<p>根据输入&lt; s &gt;的不同来选择输出哪一位输出（多选一）。<br>
以下是基本选择器，利用这些基本选择器可以构成更复杂的选择器</p>
<h4 id="2to1">2to1</h4>
<figure data-type="image" tabindex="2"><img src="https://unmaned-air.github.io/post-images/1655002103868.png" alt="" loading="lazy"></figure>
<h4 id="4to1">4to1</h4>
<figure data-type="image" tabindex="3"><img src="https://unmaned-air.github.io/post-images/1655002111029.png" alt="" loading="lazy"></figure>
<h3 id="译码器">译码器</h3>
<p>与选择器不同，译码器是根据输入，决定输出，多位输出（一般是独热码输出）。</p>
<h4 id="2-4译码器最基本的译码器">2-4译码器（最基本的译码器）</h4>
<p>输入：一项使能端E<sub>n</sub>,w<sub>1</sub> w<sub>2</sub> 输入控制输出。<br>
<img src="https://unmaned-air.github.io/post-images/1655002856097.png" alt="" loading="lazy"><br>
基于2-4译码器，可以实现3-8、4-16译码器，多路选择器等<br>
###编码器<br>
编码器将给定的信息编码为一种更紧凑的形式。（将独热码变成正常的码）<s>忘记是什么码了</s><br>
<img src="https://unmaned-air.github.io/post-images/1655474769727.png" alt="" loading="lazy"></p>
<h4 id="优先级编码器">优先级编码器</h4>
<p>顾名思义，对于一个四位优先级编码器输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><msub><mi>w</mi><mn>2</mn></msub><msub><mi>w</mi><mn>3</mn></msub><msub><mi>w</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">w_1w_2w_3w_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是1，那么无论后面的作何输入，都按照第一位是1的处理。而对于普通编码器来说，多个输入被置为1的所有输入模式都没有在真值表中出现，被认为无关项。（有点绕，但大概就是1111对两个编码器来说，普通编码器会没有输出，或者说有输出四种编码的可能，而对优先级编码器来说是敏感信号有且仅输出11）.</p>
<h3 id="算术比较电路无符号数比较">算术比较电路（无符号数比较）</h3>
<p>逐位进行比较列出真值表。代码相对好写，但对于函数式的列出需要真值表辅助。<br>
还有一种<a href="#compare">比较器（有符号）</a> 的方法是实现X-Y（取反码进行加法）并且根据结果值的信号进行操作（遇事不决，列真值表）<mark>见第3章例3.9</mark> .</p>
<p>##触发器、寄存器和计数器<br>
时序电路，根据CLK信号的变化触发电路。</p>
<h3 id="基本锁存器-门控sr锁存器-门控d锁存器">基本锁存器、门控SR锁存器、门控D锁存器</h3>
<ul>
<li>基本锁存器<br>
一种具有记忆功能的器件，最基本的锁存器。<br>
<img src="https://unmaned-air.github.io/post-images/1655547670636.png" alt="" loading="lazy"></li>
<li>门控 <strong>SR</strong> 锁存器<br>
相较于基本锁存器，具有类似“使能端”，控制什么时候元件对输入信号的变化做出相应。<br>
<img src="https://unmaned-air.github.io/post-images/1655547689025.png" alt="" loading="lazy"></li>
<li>门控 <strong>D</strong> 锁存器<br>
相较于SR锁存器，D锁存器更能保证输入信号SR两端的信号相反。<br>
<img src="https://unmaned-air.github.io/post-images/1655547700712.png" alt="" loading="lazy"></li>
</ul>
<h3 id="边沿出发的d触发器posedge-negedge">边沿出发的D触发器（<em>posedge</em> <em>negedge</em>）</h3>
<h4 id="主从d触发器">主从D触发器</h4>
<h4 id="有清零端和预置信号的d触发器">有清零端和预置信号的D触发器</h4>
<h4 id="t触发器相当于一种特殊的jk触发器">T触发器（相当于一种特殊的jk触发器）</h4>
<h4 id="jk触发器">JK触发器</h4>
<h3 id="寄存器">寄存器</h3>
<h4 id="移位寄存器">移位寄存器</h4>
<h4 id="并行存取的移位寄存器">并行存取的移位寄存器</h4>
<h3 id="计数器k进制">计数器（k进制）</h3>
<h4 id="异步计数器">异步计数器</h4>
<h4 id="同步计数器">同步计数器</h4>
<h4 id="具有并行加载功能的计数器">具有并行加载功能的计数器</h4>
<h4 id="其他类型的计数器">其他类型的计数器</h4>
<ul>
<li>
<p>BCD计数器</p>
</li>
<li>
<p>环形计数器</p>
</li>
<li>
<p>Johnson计数器</p>
</li>
</ul>
<h4 id="触发器电路的时序分析-时钟偏斜">触发器电路的时序分析 <em>时钟偏斜</em></h4>
<h2 id="同步时序电路">同步时序电路</h2>
<h3 id="设计步骤"><strong>设计步骤</strong></h3>
<ul>
<li>状态图</li>
<li>状态表</li>
<li>状态分配</li>
<li>选择触发器得到次态和输出表达式</li>
</ul>
<h3 id="moore型状态机">Moore型状态机</h3>
<h3 id="mealy型状态机">Mealy型状态机</h3>
<h3 id="同步时序">同步时序</h3>
<h3 id="串行加法器">串行加法器</h3>
<h2 id="杂项复习各章落下来的部分">杂项复习（各章落下来的部分）</h2>
<h3 id="最小化策略">最小化策略</h3>
<ul>
<li>字符<br>
某个给定的乘积项中包含几个变量，每一个变量可能以原量的形式也可能以非量的形式出现。每出现一个变量，无论是原量还是非量，都称为 <strong>1个字符</strong> 。</li>
<li>蕴涵项（隐含项）<br>
输入变量的逻辑值组合满足给定函数值为1的乘积项称为函数的 <strong>蕴涵项</strong> 。<em>最基本的蕴涵项是最小项，包含n个字符的蕴涵项。</em></li>
<li>质蕴涵项（素项）<br>
如果一个蕴涵项不能组合到字符数比它少的其他蕴涵项中，则称之为质蕴涵项。另一种定义是，质蕴涵项中删去任意一个字符都不再是一个有效的蕴涵项。</li>
<li>覆盖<br>
包涵了给定函数等于1的所有逻辑值组合的蕴涵项的集合称为函数的一个覆盖。</li>
<li>成本<br>
逻辑电路的成本可以由总的逻辑门数量加上电路中所有逻辑门的输入数来表示。</li>
</ul>
<h3 id="补码相关知识"><strong>补码相关知识</strong></h3>
<ul>
<li>1的补码表示法<br>
某二进制数除了符号位以外的各位取反。</li>
<li>2的补码表示法<br>
某二进制数在其1的表示法后再加1。<br>
<em>其实2的补码表示法就是我们常说的补码。</em><br>
<strong>加减有关知识</strong></li>
<li>1的补码的加法<br>
产生的最高位进位要加到最低位进行修正（可能发生溢出需要注意）<br>
<img src="https://unmaned-air.github.io/post-images/1654432320383.png" alt="" loading="lazy"></li>
<li>2的补码的加法运算<br>
忽略符号位的进位。<br>
<img src="https://unmaned-air.github.io/post-images/1654433733320.png" alt="" loading="lazy"></li>
<li>2的补码的减法运算<br>
实现减法的最简单方法是将其减数取反，并与被减数相加。得到的结果取其2的补码。（正数取其原码，负数取反再+1）<br>
<img src="https://unmaned-air.github.io/post-images/1654433869650.png" alt="" loading="lazy"></li>
</ul>
<blockquote>
<p>减法运算可以通过加法运算实现，即使用减数的2的补码方式，而不用考虑操作数的符号。用相同的加法器电路实现加法和减法运算。</p>
</blockquote>
<ul>
<li>
<p><strong>算术溢出</strong><br>
假设加法和减法的运算结果与表示该数字的有效位数匹配，如果用n位表示有符号数，则运算结果必须在 -2<sup>n-1</sup> ~ 2<sup>n-1</sup>-1 的范围内；如果结果不在该范围内，就称出现算术溢出。<br>
Overflow=C<sub>n-1</sub> ^ C<sub>n</sub></p>
</li>
<li>
<p>BCD码=原码+6</p>
</li>
<li>
<p>香农展开<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>=</mo><msub><mi>w</mi><mn>1</mn></msub><mi>f</mi><mo>(</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mi mathvariant="normal">，</mi><msub><mi>w</mi><mi>n</mi></msub><mo>)</mo><mo>+</mo><mover accent="true"><msub><mi>w</mi><mn>1</mn></msub><mo stretchy="true">‾</mo></mover><mi>f</mi><mo>(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>3</mn></msub><mo separator="true">,</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">,</mo><msub><mi>w</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">f=w_1f(1,w_2,···，w_n)+\overline{w_1}f(0,w_2,w_3,···,w_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
</li>
<li>
<p>边沿代码阻塞与非阻塞赋值</p>
</li>
<li></li>
</ul>
<h3 id="利用选择器搭建移位电路">利用选择器搭建移位电路</h3>
<ul>
<li>普通移位器</li>
<li>桶形移位器</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[期末前夕的C++]]></title>
        <id>https://unmaned-air.github.io/post/qi-mo-qian-xi-de-c/</id>
        <link href="https://unmaned-air.github.io/post/qi-mo-qian-xi-de-c/">
        </link>
        <updated>2022-05-27T03:17:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>以下是我在复习的过程中发现的华点（就是我不明白并大为震惊的知识点）</p>
</blockquote>
<h3 id="一些容易被搞到的知识点">一些容易被搞到的知识点</h3>
<ul>
<li>编写C++程序一般需要经过的几个步骤依次是：<em>编辑、编译、连接、运行</em></li>
<li><a href="https://unmaned-air.github.io/post/fu-zhi-jian-rong-xing-gui-ze/">赋值兼容性规则</a>是指派生类对象可以当作基类对象使用，只要存在继承关系，所以单继承或多继承都适用。</li>
<li></li>
</ul>
<h3 id="空指针和野指针">空指针和野指针</h3>
<p><strong>空指针：</strong> 指针变量指向内存中编号为0的空间，可以初始化指针变量（<em>因为野指针野一点</em>），但空指针指向的内存是不可以访问的。<br>
<strong>野指针：</strong> 指针变量指向非法的空间（<em>比如指向地址编号为某某的空间，比如指针指向数组溢出的位置</em>）</p>
<h3 id="const修饰指针">const修饰指针</h3>
<ul>
<li>常量的指针（<em>const int</em>  *p）<br>
指针指向可以修改，但指针指向的值不可修改<br>
<em>理解为const int 后面带了个  * 指针</em></li>
<li>指针的常量（<em>int * const</em>）<br>
指针指向不可修改，指针指向的值可以修改<br>
<em>理解为 * 后面带着const ，const关键字修饰的是指针变量</em></li>
<li>同时修饰<br>
指针指向与指针指向的值都不可以修改。</li>
</ul>
<pre><code class="language-C++">int main() {

	int a = 10;
	int b = 10;

	//const修饰的是指针，指针指向可以改，指针指向的值不可以更改
	const int * p1 = &amp;a; 
	p1 = &amp;b; //正确
	//*p1 = 100;  报错
	

	//const修饰的是常量，指针指向不可以改，指针指向的值可以更改
	int * const p2 = &amp;a;
	//p2 = &amp;b; //错误
	*p2 = 100; //正确

    //const既修饰指针又修饰常量
	const int * const p3 = &amp;a;
	//p3 = &amp;b; //错误
	//*p3 = 100; //错误

	system(&quot;pause&quot;);

	return 0;
}
</code></pre>
<h3 id="内存分区模型">内存分区模型</h3>
<ol>
<li>代码区：就是代码所占的内存；</li>
<li>全局区：存放全局变量和静态变量；</li>
<li>栈区：由编译器自动分配释放，存放函数的参数值、局部变量等；</li>
<li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。（<em>new</em>）</li>
</ol>
<blockquote>
<p>不同区域存放的数据赋予不同的生命周期，给我们更大的灵活编程</p>
</blockquote>
<h3 id="new操作符">new操作符</h3>
<p>C++中利用new操作符在堆区开辟内存，在程序的最后要记得 <em>delete</em> 数据。<br>
利用new创建的数据，会返回该数据对应类型的指针。<br>
需要注意的是开辟数组的时候的操作是层层覆盖的。</p>
<ul>
<li>示例1</li>
</ul>
<pre><code class="language-C++">int* func()
{
	int* a = new int(10);
	return a;
}
int main() {
	int *p = func();
	cout &lt;&lt; *p &lt;&lt; endl;
	//利用delete释放堆区数据
	delete p;
	//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问
	return 0;
}
</code></pre>
<ul>
<li>示例2</li>
</ul>
<pre><code class="language-C++">//堆区开辟数组
int main() {
	int* arr = new int[10];
	for (int i = 0; i &lt; 10; i++)
	{
		arr[i] = i + 100;
	}
	for (int i = 0; i &lt; 10; i++)
	{
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	}
	//释放数组 delete 后加 []
	delete[] arr;
	return 0;
}
</code></pre>
<ul>
<li>示例3</li>
</ul>
<pre><code class="language-C++">//动态内存分配
//new开辟二维数组空间
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

void chan(int **a)
{
	int b[3][3];
	for (int i = 0; i &lt; 3; ++i)
		for (int j = 0; j &lt; 3; ++j)
			b[i][j] = a[j][i];
	for (int i = 0; i &lt; 3; ++i)
		for (int j = 0; j &lt; 3; ++j)
			a[i][j] = b[i][j];
}

int main()
{
	int **a;
	a = new int*[3];
	for (int i = 0; i &lt; 3; ++i)
		a[i] = new int[3];
	int k = 0;

	for (int i = 0; i &lt; 3; ++i)
		for (int j = 0; j &lt; 3; ++j)
			a[i][j] = k++;

	chan(a);
	for (int i = 0; i &lt; 3; ++i)
	{
		for (int j = 0; j &lt; 3; ++j)
			cout &lt;&lt; a[i][j] &lt;&lt; ' ';
		cout &lt;&lt; endl;
	}
	for (int i = 0; i &lt; 3; ++i)
		delete[] a[i];
	delete[] a;
	return 0;
}
</code></pre>
<h3 id="引用">引用</h3>
<h5 id="注意事项">注意事项</h5>
<ul>
<li>引用必须初始化。</li>
</ul>
<blockquote>
<p>引用变量是一个别名，也就是说它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p>
</blockquote>
<ul>
<li>引用在初始化之后不可以改变。</li>
</ul>
<h5 id="引用和指针的不同之处">引用和指针的不同之处</h5>
<ul>
<li>不存在空引用。引用必须连接到一块合法的内存。</li>
<li>一旦引用被初始化一个对象，就不能被指向到另一个对象。指针可以再任何时候指向到另一个对象。但是指针可以在 <strong>任何时间</strong> 指向到另一个对象。</li>
<li>引用必须在创建时被初始化。指针可以在任何时间被初始化</li>
</ul>
<h5 id="把引用作为参数值与返回值">把引用作为参数值与返回值</h5>
<pre><code>C中有利用&amp;达到传入数字进行swap操作，C++中同样有类似操作
</code></pre>
<pre><code class="language-C">#include&lt;stdio.h&gt;
void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
int main()
{
	int a = 10;
	int b = 20;
	swap(&amp;a, &amp;b);
	printf(&quot;%d,%d&quot;, a, b);
	return 0;
}
</code></pre>
<ul>
<li>C++中把引用作为参数</li>
</ul>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
void swap(int&amp; x, int&amp; y);
int main ()
{
   int a = 100;
   int b = 200;
   cout &lt;&lt; &quot;交换前，a 的值：&quot; &lt;&lt; a &lt;&lt; endl;
   cout &lt;&lt; &quot;交换前，b 的值：&quot; &lt;&lt; b &lt;&lt; endl;
   swap(a, b);//最突出的一点是a,b不带任何符号，但却能进行换位
   cout &lt;&lt; &quot;交换后，a 的值：&quot; &lt;&lt; a &lt;&lt; endl;
   cout &lt;&lt; &quot;交换后，b 的值：&quot; &lt;&lt; b &lt;&lt; endl;
 
   return 0;
}
void swap(int&amp; x, int&amp; y)
{
   int temp;
   temp = x; /* 保存地址 x 的值 */
   x = y;    /* 把 y 赋值给 x */
   y = temp; /* 把 x 赋值给 y  */
  
   return;
}
</code></pre>
<h3 id="函数提高">函数提高</h3>
<h4 id="函数默认参数">函数默认参数</h4>
<p>在C++中，函数的形参列表中的形参是可以又默认值的。<br>
注意事项：</p>
<ol>
<li>所有的有默认参数的形式参数都必须置于最后；</li>
<li>如果函数声明有默认值，函数实现的时候就不能有默认参数。解释如下：</li>
</ol>
<blockquote>
<p>由于在实际写代码过程中，可能会与到函数的定义和声明不在同一文件，声明出现在头文件中的情况。这时，对带默认值的函数在声明和定义时，需要注意，默认值出现在声明的代码中，定义中不能再对参数赋与默认值，否则会报错。</p>
</blockquote>
<h4 id="lanbda-函数">Lanbda 函数</h4>
<p>匿名函数，把函数看作对象。</p>
<blockquote>
<p>Lambda函数很简洁，但变化较多。</p>
</blockquote>
<p>1、什么也不捕获，或者是故意不用 Lambda 函数外部的变量</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
 
int main()
{
    int i = 1024;
    auto func = [] { cout &lt;&lt; i; };
    func();
}  // 结果报错，因为未指定默认捕获模式
正确的如下：

#include &lt;iostream&gt;
using namespace std;
 
int main()
{
    int i = 1024;
    auto func = [=]{  // [=] 表明将外部的所有变量拷贝一份到该Lambda函数内部
        cout &lt;&lt; i;
    };
    func();
}
</code></pre>
<p>2、引用捕获</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
 
int main()
{
    int i = 1024;
    cout &lt;&lt; &amp;i &lt;&lt; endl;
    auto fun1 = [&amp;]{
        cout &lt;&lt; &amp;i &lt;&lt; endl;
    };
    fun1();
}
</code></pre>
<p>3、复制并引用捕获</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
 
int main()
{
    int i = 1024, j = 2048;
 
    cout &lt;&lt; &quot;i:&quot; &lt;&lt; &amp;i &lt;&lt; endl;
    cout &lt;&lt; &quot;j:&quot; &lt;&lt; &amp;j &lt;&lt; endl;
 
    auto fun1 = [=, &amp;i]{ // 默认拷贝外部所有变量，但引用变量 i
        cout &lt;&lt; &quot;i:&quot; &lt;&lt; &amp;i &lt;&lt; endl;
        cout &lt;&lt; &quot;j:&quot; &lt;&lt; &amp;j &lt;&lt; endl;
    };
    fun1();
}
</code></pre>
<p>4、指定引用或复制</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
 
int main()
{
    int i = 1024, j = 2048;
 
    cout &lt;&lt; &quot;outside i value:&quot; &lt;&lt; i &lt;&lt; &quot; addr:&quot; &lt;&lt; &amp;i &lt;&lt; endl;
 
    auto fun1 = [i]{
        cout &lt;&lt; &quot;inside  i value:&quot; &lt;&lt; i &lt;&lt; &quot; addr:&quot; &lt;&lt; &amp;i &lt;&lt; endl;
        // cout &lt;&lt; j &lt;&lt; endl; // j 未捕获
    };
    fun1();
}
</code></pre>
<p>5、捕获this指针</p>
<pre><code class="language-C++">#include &lt;iostream&gt;
using namespace std;
 
class test
{
public:
    void hello() {
        cout &lt;&lt; &quot;test hello!n&quot;;
    };
    void lambda() {
        auto fun = [this]{ // 捕获了 this 指针
            this-&gt;hello(); // 这里 this 调用的就是 class test 的对象了
        };
        fun();
    }
};
 
int main()
{
    test t;
    t.lambda();
}
</code></pre>
<h4 id="函数占位参数">函数占位参数</h4>
<p>用单一的数据类型占位形参，调用函数时必须填补该位置。</p>
<pre><code class="language-C++">void func(int a,int){
      cout&lt;&lt;&quot;working...&quot;&lt;&lt;endl;
      }
int main(){
      func(10,10);
      return 0;
      }
</code></pre>
<h4 id="函数重载的注意事项">函数重载的注意事项</h4>
<ol>
<li>返回值不能作为重载的条件</li>
</ol>
<h3 id="类和对象">类和对象</h3>
<ul>
<li>struct和class的唯一区别就在于<mark>默认的访问权限不同</mark> ，struct的默认访问权限是公共，class默认权限为私有。</li>
</ul>
<h4 id="构造与析构中的细节">构造与析构中的细节</h4>
<p>构造函数语法：类名(){}</p>
<ul>
<li>语法</li>
</ul>
<ol>
<li>构造函数，<mark>没有返回值</mark>也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此<mark>可以发生重载</mark></li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且<mark>只会调用一次</mark></li>
</ol>
<ul>
<li>分类及调用</li>
</ul>
<ol>
<li>两种分类方式：
<ol>
<li>按参数分为:有参构造和无参构造</li>
<li>按类型分为普通构造和拷贝构造</li>
</ol>
</li>
<li>三种调用方式：
<ol>
<li>括号法</li>
<li>显示法</li>
<li>隐式转换法</li>
</ol>
</li>
</ol>
<ul>
<li>如果定义了复制构造函数，C++不会提供其它的构造函数</li>
<li>深拷贝和浅拷贝<br>
如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝时重复释放堆区带来的问题。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[机器学习目录]]></title>
        <id>https://unmaned-air.github.io/post/ji-qi-xue-xi-mu-lu/</id>
        <link href="https://unmaned-air.github.io/post/ji-qi-xue-xi-mu-lu/">
        </link>
        <updated>2022-04-25T11:47:01.000Z</updated>
        <summary type="html"><![CDATA[<p>听我说，谢谢你：）</p>
]]></summary>
        <content type="html"><![CDATA[<p>听我说，谢谢你：）</p>
<!-- more -->
<p>（一）<a href="http://localhost:4000/post/ji-qi-xue-xi-de-ji-ben-gai-nian/">机器学习相关概念</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于kali虚拟机的网络渗透笔记]]></title>
        <id>https://unmaned-air.github.io/post/ji-yu-kali-xu-ni-ji-de-wang-luo-shen-tou-bi-ji/</id>
        <link href="https://unmaned-air.github.io/post/ji-yu-kali-xu-ni-ji-de-wang-luo-shen-tou-bi-ji/">
        </link>
        <updated>2022-04-25T08:40:12.000Z</updated>
        <content type="html"><![CDATA[<p>（一）<a href= "https://unmaned-air.github.io/post/ji-yu-kali-xu-ni-ji-de-wang-luo-shen-tou-ji-zhu/">scapy基础</a><br>
（二）<a href="https://unmaned-air.github.io/post/ji-yu-kali-xu-ni-ji-de-wang-luo-shen-tou-ji-zhu-yi-scapy-dhcp-ji-chu/
">DHCP协议</a><br>
（三）DNS协议</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安全感的来源是自己的能力]]></title>
        <id>https://unmaned-air.github.io/post/an-quan-gan-de-lai-yuan-shi-zi-ji-de-neng-li/</id>
        <link href="https://unmaned-air.github.io/post/an-quan-gan-de-lai-yuan-shi-zi-ji-de-neng-li/">
        </link>
        <updated>2022-04-25T07:53:08.000Z</updated>
        <summary type="html"><![CDATA[<p>现在开始还来得及</p>
]]></summary>
        <content type="html"><![CDATA[<p>现在开始还来得及</p>
<!-- more -->
]]></content>
    </entry>
</feed>